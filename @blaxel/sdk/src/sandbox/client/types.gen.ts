/* eslint-disable */
// This file is auto-generated by @hey-api/openapi-ts

export type Directory = {
    files?: Array<File>;
    path?: string;
    /**
     * @name Subdirectories
     */
    subdirectories?: Array<Directory>;
};

export type ErrorResponse = {
    error?: string;
};

export type File = {
    group?: string;
    lastModified?: string;
    owner?: string;
    path?: string;
    /**
     * swagger:strfmt string
     */
    permissions?: string;
    size?: number;
};

export type FileRequest = {
    content?: string;
    isDirectory?: boolean;
    permissions?: string;
};

export type FileWithContent = {
    content?: string;
    group?: string;
    lastModified?: string;
    owner?: string;
    path?: string;
    /**
     * swagger:strfmt string
     */
    permissions?: string;
    size?: number;
};

export type PortMonitorRequest = {
    /**
     * URL to call when a new port is detected
     */
    callback?: string;
};

export type ProcessKillRequest = {
    signal?: string;
};

export type ProcessRequest = {
    command: string;
    name?: string;
    streamLogs?: boolean;
    timeout?: number;
    waitForCompletion?: boolean;
    waitForPorts?: Array<(number)>;
    workingDir?: string;
};

export type ProcessResponse = {
    command?: string;
    completedAt?: string;
    exitCode?: number;
    name?: string;
    pid?: string;
    startedAt?: string;
    status?: string;
    workingDir?: string;
};

export type SuccessResponse = {
    message?: string;
    path?: string;
};

export type DeleteFilesystemByPathData = {
    path: {
        /**
         * File or directory path
         */
        path: string;
    };
    query?: {
        /**
         * Delete directory recursively
         */
        recursive?: boolean;
    };
};

export type DeleteFilesystemByPathResponse = (SuccessResponse);

export type DeleteFilesystemByPathError = (ErrorResponse);

export type GetFilesystemByPathData = {
    path: {
        /**
         * File or directory path
         */
        path: string;
    };
};

export type GetFilesystemByPathResponse = ((Directory | FileWithContent));

export type GetFilesystemByPathError = (ErrorResponse);

export type PutFilesystemByPathData = {
    /**
     * File or directory information
     */
    body: FileRequest;
    path: {
        /**
         * File or directory path
         */
        path: string;
    };
};

export type PutFilesystemByPathResponse = (SuccessResponse);

export type PutFilesystemByPathError = (ErrorResponse);

export type DeleteNetworkProcessByPidMonitorData = {
    path: {
        /**
         * Process ID
         */
        pid: number;
    };
};

export type DeleteNetworkProcessByPidMonitorResponse = ({
    [key: string]: unknown;
});

export type DeleteNetworkProcessByPidMonitorError = (ErrorResponse);

export type PostNetworkProcessByPidMonitorData = {
    /**
     * Port monitor configuration
     */
    body: PortMonitorRequest;
    path: {
        /**
         * Process ID
         */
        pid: number;
    };
};

export type PostNetworkProcessByPidMonitorResponse = ({
    [key: string]: unknown;
});

export type PostNetworkProcessByPidMonitorError = (ErrorResponse);

export type GetNetworkProcessByPidPortsData = {
    path: {
        /**
         * Process ID
         */
        pid: number;
    };
};

export type GetNetworkProcessByPidPortsResponse = ({
    [key: string]: unknown;
});

export type GetNetworkProcessByPidPortsError = (ErrorResponse);

export type GetProcessResponse = (Array<ProcessResponse>);

export type GetProcessError = unknown;

export type PostProcessData = {
    /**
     * Process execution request
     */
    body: ProcessRequest;
};

export type PostProcessResponse = (ProcessResponse);

export type PostProcessError = (ErrorResponse);

export type DeleteProcessByIdentifierData = {
    path: {
        /**
         * Process identifier (PID or name)
         */
        identifier: string;
    };
};

export type DeleteProcessByIdentifierResponse = (SuccessResponse);

export type DeleteProcessByIdentifierError = (ErrorResponse);

export type GetProcessByIdentifierData = {
    path: {
        /**
         * Process identifier (PID or name)
         */
        identifier: string;
    };
};

export type GetProcessByIdentifierResponse = (ProcessResponse);

export type GetProcessByIdentifierError = (ErrorResponse);

export type DeleteProcessByIdentifierKillData = {
    /**
     * Kill options
     */
    body?: ProcessKillRequest;
    path: {
        /**
         * Process identifier (PID or name)
         */
        identifier: string;
    };
};

export type DeleteProcessByIdentifierKillResponse = (SuccessResponse);

export type DeleteProcessByIdentifierKillError = (ErrorResponse);

export type GetProcessByIdentifierLogsData = {
    path: {
        /**
         * Process identifier (PID or name)
         */
        identifier: string;
    };
};

export type GetProcessByIdentifierLogsResponse = ({
    [key: string]: (string);
});

export type GetProcessByIdentifierLogsError = (ErrorResponse);