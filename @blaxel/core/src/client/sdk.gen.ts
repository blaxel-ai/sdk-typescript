// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { ListAgentsData, ListAgentsResponse, CreateAgentData, CreateAgentResponse, DeleteAgentData, DeleteAgentResponse, GetAgentData, GetAgentResponse, UpdateAgentData, UpdateAgentResponse, ListAgentRevisionsData, ListAgentRevisionsResponse, GetConfigurationData, GetConfigurationResponse, ListFunctionsData, ListFunctionsResponse, CreateFunctionData, CreateFunctionResponse, DeleteFunctionData, DeleteFunctionResponse, GetFunctionData, GetFunctionResponse, UpdateFunctionData, UpdateFunctionResponse, ListFunctionRevisionsData, ListFunctionRevisionsResponse, GetIntegrationData, GetIntegrationResponse, ListIntegrationConnectionsData, ListIntegrationConnectionsResponse, CreateIntegrationConnectionData, CreateIntegrationConnectionResponse, DeleteIntegrationConnectionData, DeleteIntegrationConnectionResponse, GetIntegrationConnectionData, GetIntegrationConnectionResponse, UpdateIntegrationConnectionData, UpdateIntegrationConnectionResponse, GetIntegrationConnectionModelEndpointConfigurationsData, ListIntegrationConnectionModelsData, GetIntegrationConnectionModelData, ListKnowledgebasesData, ListKnowledgebasesResponse, CreateKnowledgebaseData, CreateKnowledgebaseResponse, DeleteKnowledgebaseData, DeleteKnowledgebaseResponse, GetKnowledgebaseData, GetKnowledgebaseResponse, UpdateKnowledgebaseData, UpdateKnowledgebaseResponse, ListKnowledgebaseRevisionsData, ListKnowledgebaseRevisionsResponse, ListLocationsData, ListLocationsResponse, ListMcpHubDefinitionsData, ListMcpHubDefinitionsResponse, ListModelsData, ListModelsResponse, CreateModelData, CreateModelResponse, DeleteModelData, DeleteModelResponse, GetModelData, GetModelResponse, UpdateModelData, UpdateModelResponse, ListModelRevisionsData, ListModelRevisionsResponse, ListPoliciesData, ListPoliciesResponse, CreatePolicyData, CreatePolicyResponse, DeletePolicyData, DeletePolicyResponse, GetPolicyData, GetPolicyResponse, UpdatePolicyData, UpdatePolicyResponse, ListPrivateClustersData, ListPrivateClustersResponse, CreatePrivateClusterData, CreatePrivateClusterResponse, DeletePrivateClusterData, DeletePrivateClusterResponse, GetPrivateClusterData, GetPrivateClusterResponse, UpdatePrivateClusterData, UpdatePrivateClusterResponse, GetPrivateClusterHealthData, UpdatePrivateClusterHealthData, ListAllPendingInvitationsData, ListAllPendingInvitationsResponse, ListSandboxHubDefinitionsData, ListSandboxHubDefinitionsResponse, ListSandboxesData, ListSandboxesResponse, CreateSandboxData, CreateSandboxResponse, DeleteSandboxData, DeleteSandboxResponse, GetSandboxData, GetSandboxResponse, UpdateSandboxData, UpdateSandboxResponse, ListSandboxPreviewsData, ListSandboxPreviewsResponse, CreateSandboxPreviewData, CreateSandboxPreviewResponse, DeleteSandboxPreviewData, DeleteSandboxPreviewResponse, GetSandboxPreviewData, GetSandboxPreviewResponse, UpdateSandboxPreviewData, UpdateSandboxPreviewResponse, ListSandboxPreviewTokensData, ListSandboxPreviewTokensResponse, CreateSandboxPreviewTokenData, CreateSandboxPreviewTokenResponse, DeleteSandboxPreviewTokenData, DeleteSandboxPreviewTokenResponse, StartSandboxData, StartSandboxResponse, StopSandboxData, StopSandboxResponse, GetWorkspaceServiceAccountsData, GetWorkspaceServiceAccountsResponse, CreateWorkspaceServiceAccountData, CreateWorkspaceServiceAccountResponse, DeleteWorkspaceServiceAccountData, DeleteWorkspaceServiceAccountResponse, UpdateWorkspaceServiceAccountData, UpdateWorkspaceServiceAccountResponse, ListApiKeysForServiceAccountData, ListApiKeysForServiceAccountResponse, CreateApiKeyForServiceAccountData, CreateApiKeyForServiceAccountResponse, DeleteApiKeyForServiceAccountData, ListTemplatesData, ListTemplatesResponse, GetTemplateData, GetTemplateResponse, GetTemplateContentsData, GetTemplateContentsResponse, GetTemplateFileContentsData, GetTemplateFileContentsResponse, ListWorkspaceUsersData, ListWorkspaceUsersResponse, InviteWorkspaceUserData, InviteWorkspaceUserResponse, RemoveWorkspaceUserData, UpdateWorkspaceUserRoleData, UpdateWorkspaceUserRoleResponse, ListWorkspacesData, ListWorkspacesResponse, CreateWorspaceData, CreateWorspaceResponse, DeleteWorkspaceData, DeleteWorkspaceResponse, GetWorkspaceData, GetWorkspaceResponse, UpdateWorkspaceData, UpdateWorkspaceResponse, DeclineWorkspaceInvitationData, DeclineWorkspaceInvitationResponse, AcceptWorkspaceInvitationData, AcceptWorkspaceInvitationResponse, LeaveWorkspaceData, LeaveWorkspaceResponse, CheckWorkspaceAvailabilityData, CheckWorkspaceAvailabilityResponse } from './types.gen.js';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List all agents
 */
export const listAgents = <ThrowOnError extends boolean = false>(options?: Options<ListAgentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListAgentsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents',
        ...options
    });
};

/**
 * Create agent by name
 */
export const createAgent = <ThrowOnError extends boolean = false>(options: Options<CreateAgentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAgentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete agent by name
 */
export const deleteAgent = <ThrowOnError extends boolean = false>(options: Options<DeleteAgentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAgentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents/{agentName}',
        ...options
    });
};

/**
 * Get agent by name
 */
export const getAgent = <ThrowOnError extends boolean = false>(options: Options<GetAgentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAgentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents/{agentName}',
        ...options
    });
};

/**
 * Update agent by name
 */
export const updateAgent = <ThrowOnError extends boolean = false>(options: Options<UpdateAgentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateAgentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents/{agentName}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all agent revisions
 */
export const listAgentRevisions = <ThrowOnError extends boolean = false>(options: Options<ListAgentRevisionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAgentRevisionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/agents/{agentName}/revisions',
        ...options
    });
};

/**
 * List all configurations
 */
export const getConfiguration = <ThrowOnError extends boolean = false>(options?: Options<GetConfigurationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetConfigurationResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/configuration',
        ...options
    });
};

/**
 * List all functions
 */
export const listFunctions = <ThrowOnError extends boolean = false>(options?: Options<ListFunctionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListFunctionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/functions',
        ...options
    });
};

/**
 * Create function
 */
export const createFunction = <ThrowOnError extends boolean = false>(options: Options<CreateFunctionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateFunctionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/functions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete function by name
 */
export const deleteFunction = <ThrowOnError extends boolean = false>(options: Options<DeleteFunctionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteFunctionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/functions/{functionName}',
        ...options
    });
};

/**
 * Get function by name
 */
export const getFunction = <ThrowOnError extends boolean = false>(options: Options<GetFunctionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFunctionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/functions/{functionName}',
        ...options
    });
};

/**
 * Update function by name
 */
export const updateFunction = <ThrowOnError extends boolean = false>(options: Options<UpdateFunctionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateFunctionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/functions/{functionName}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List function revisions
 * Returns revisions for a function by name.
 */
export const listFunctionRevisions = <ThrowOnError extends boolean = false>(options: Options<ListFunctionRevisionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListFunctionRevisionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/functions/{functionName}/revisions',
        ...options
    });
};

/**
 * List integrations connections
 * Returns integration information by name.
 */
export const getIntegration = <ThrowOnError extends boolean = false>(options: Options<GetIntegrationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetIntegrationResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/integrations/{integrationName}',
        ...options
    });
};

/**
 * List integrations connections
 * Returns a list of all connections integrations in the workspace.
 */
export const listIntegrationConnections = <ThrowOnError extends boolean = false>(options?: Options<ListIntegrationConnectionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListIntegrationConnectionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/integrations/connections',
        ...options
    });
};

/**
 * Create integration
 * Create a connection for an integration.
 */
export const createIntegrationConnection = <ThrowOnError extends boolean = false>(options: Options<CreateIntegrationConnectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateIntegrationConnectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/integrations/connections',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete integration
 * Deletes an integration connection by integration name and connection name.
 */
export const deleteIntegrationConnection = <ThrowOnError extends boolean = false>(options: Options<DeleteIntegrationConnectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteIntegrationConnectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/integrations/connections/{connectionName}',
        ...options
    });
};

/**
 * Get integration
 * Returns an integration connection by integration name and connection name.
 */
export const getIntegrationConnection = <ThrowOnError extends boolean = false>(options: Options<GetIntegrationConnectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetIntegrationConnectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/integrations/connections/{connectionName}',
        ...options
    });
};

/**
 * Update integration connection
 * Update an integration connection by integration name and connection name.
 */
export const updateIntegrationConnection = <ThrowOnError extends boolean = false>(options: Options<UpdateIntegrationConnectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateIntegrationConnectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/integrations/connections/{connectionName}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get integration connection model endpoint configurations
 * Returns a list of all endpoint configurations for a model.
 */
export const getIntegrationConnectionModelEndpointConfigurations = <ThrowOnError extends boolean = false>(options: Options<GetIntegrationConnectionModelEndpointConfigurationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/integrations/connections/{connectionName}/endpointConfigurations',
        ...options
    });
};

/**
 * List integration connection models
 * Returns a list of all models for an integration connection.
 */
export const listIntegrationConnectionModels = <ThrowOnError extends boolean = false>(options: Options<ListIntegrationConnectionModelsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/integrations/connections/{connectionName}/models',
        ...options
    });
};

/**
 * Get integration model endpoint configurations
 * Returns a model for an integration connection by ID.
 */
export const getIntegrationConnectionModel = <ThrowOnError extends boolean = false>(options: Options<GetIntegrationConnectionModelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/integrations/connections/{connectionName}/models/{modelId}',
        ...options
    });
};

/**
 * List knowledgebases
 * Returns a list of all knowledgebases in the workspace.
 */
export const listKnowledgebases = <ThrowOnError extends boolean = false>(options?: Options<ListKnowledgebasesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListKnowledgebasesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledgebases',
        ...options
    });
};

/**
 * Create knowledgebase
 * Creates an knowledgebase.
 */
export const createKnowledgebase = <ThrowOnError extends boolean = false>(options: Options<CreateKnowledgebaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateKnowledgebaseResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledgebases',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete knowledgebase
 * Deletes an knowledgebase by Name.
 */
export const deleteKnowledgebase = <ThrowOnError extends boolean = false>(options: Options<DeleteKnowledgebaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteKnowledgebaseResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledgebases/{knowledgebaseName}',
        ...options
    });
};

/**
 * Get knowledgebase
 * Returns an knowledgebase by Name.
 */
export const getKnowledgebase = <ThrowOnError extends boolean = false>(options: Options<GetKnowledgebaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetKnowledgebaseResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledgebases/{knowledgebaseName}',
        ...options
    });
};

/**
 * Update knowledgebase
 * Updates an knowledgebase.
 */
export const updateKnowledgebase = <ThrowOnError extends boolean = false>(options: Options<UpdateKnowledgebaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateKnowledgebaseResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledgebases/{knowledgebaseName}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List knowledgebase revisions
 * Returns revisions for a knowledgebase by name.
 */
export const listKnowledgebaseRevisions = <ThrowOnError extends boolean = false>(options: Options<ListKnowledgebaseRevisionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListKnowledgebaseRevisionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/knowledgebases/{knowledgebaseName}/revisions',
        ...options
    });
};

/**
 * List locations
 * Returns a list of all locations available with status.
 */
export const listLocations = <ThrowOnError extends boolean = false>(options?: Options<ListLocationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListLocationsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/locations',
        ...options
    });
};

export const listMcpHubDefinitions = <ThrowOnError extends boolean = false>(options?: Options<ListMcpHubDefinitionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListMcpHubDefinitionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/mcp/hub',
        ...options
    });
};

/**
 * List models
 * Returns a list of all models in the workspace.
 */
export const listModels = <ThrowOnError extends boolean = false>(options?: Options<ListModelsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListModelsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/models',
        ...options
    });
};

/**
 * Create model
 * Creates a model.
 */
export const createModel = <ThrowOnError extends boolean = false>(options: Options<CreateModelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateModelResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/models',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete model
 * Deletes a model by name.
 */
export const deleteModel = <ThrowOnError extends boolean = false>(options: Options<DeleteModelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteModelResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/models/{modelName}',
        ...options
    });
};

/**
 * Get model
 * Returns a model by name.
 */
export const getModel = <ThrowOnError extends boolean = false>(options: Options<GetModelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetModelResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/models/{modelName}',
        ...options
    });
};

/**
 * Create or update model
 * Update a model by name.
 */
export const updateModel = <ThrowOnError extends boolean = false>(options: Options<UpdateModelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateModelResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/models/{modelName}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List model revisions
 * Returns revisions for a model by name.
 */
export const listModelRevisions = <ThrowOnError extends boolean = false>(options: Options<ListModelRevisionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListModelRevisionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/models/{modelName}/revisions',
        ...options
    });
};

/**
 * List policies
 * Returns a list of all policies in the workspace.
 */
export const listPolicies = <ThrowOnError extends boolean = false>(options?: Options<ListPoliciesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListPoliciesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/policies',
        ...options
    });
};

/**
 * Create policy
 * Creates a policy.
 */
export const createPolicy = <ThrowOnError extends boolean = false>(options: Options<CreatePolicyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePolicyResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/policies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete policy
 * Deletes a policy by name.
 */
export const deletePolicy = <ThrowOnError extends boolean = false>(options: Options<DeletePolicyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePolicyResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/policies/{policyName}',
        ...options
    });
};

/**
 * Get policy
 * Returns a policy by name.
 */
export const getPolicy = <ThrowOnError extends boolean = false>(options: Options<GetPolicyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPolicyResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/policies/{policyName}',
        ...options
    });
};

/**
 * Update policy
 * Updates a policy.
 */
export const updatePolicy = <ThrowOnError extends boolean = false>(options: Options<UpdatePolicyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePolicyResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/policies/{policyName}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all private clusters
 */
export const listPrivateClusters = <ThrowOnError extends boolean = false>(options?: Options<ListPrivateClustersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListPrivateClustersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/privateclusters',
        ...options
    });
};

/**
 * Create private cluster
 */
export const createPrivateCluster = <ThrowOnError extends boolean = false>(options?: Options<CreatePrivateClusterData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreatePrivateClusterResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/privateclusters',
        ...options
    });
};

/**
 * Delete private cluster
 */
export const deletePrivateCluster = <ThrowOnError extends boolean = false>(options: Options<DeletePrivateClusterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePrivateClusterResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/privateclusters/{privateClusterName}',
        ...options
    });
};

/**
 * Get private cluster by name
 */
export const getPrivateCluster = <ThrowOnError extends boolean = false>(options: Options<GetPrivateClusterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPrivateClusterResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/privateclusters/{privateClusterName}',
        ...options
    });
};

/**
 * Update private cluster
 */
export const updatePrivateCluster = <ThrowOnError extends boolean = false>(options: Options<UpdatePrivateClusterData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePrivateClusterResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/privateclusters/{privateClusterName}',
        ...options
    });
};

/**
 * Get private cluster health
 */
export const getPrivateClusterHealth = <ThrowOnError extends boolean = false>(options: Options<GetPrivateClusterHealthData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/privateclusters/{privateClusterName}/health',
        ...options
    });
};

/**
 * Update private cluster health
 */
export const updatePrivateClusterHealth = <ThrowOnError extends boolean = false>(options: Options<UpdatePrivateClusterHealthData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/privateclusters/{privateClusterName}/health',
        ...options
    });
};

/**
 * List pending invitations
 * Returns a list of all pending invitations in the workspace.
 */
export const listAllPendingInvitations = <ThrowOnError extends boolean = false>(options?: Options<ListAllPendingInvitationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListAllPendingInvitationsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/profile/invitations',
        ...options
    });
};

export const listSandboxHubDefinitions = <ThrowOnError extends boolean = false>(options?: Options<ListSandboxHubDefinitionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListSandboxHubDefinitionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sandbox/hub',
        ...options
    });
};

/**
 * List Sandboxes
 * Returns a list of all Sandboxes in the workspace.
 */
export const listSandboxes = <ThrowOnError extends boolean = false>(options?: Options<ListSandboxesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListSandboxesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sandboxes',
        ...options
    });
};

/**
 * Create Sandbox
 * Creates a Sandbox.
 */
export const createSandbox = <ThrowOnError extends boolean = false>(options: Options<CreateSandboxData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSandboxResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sandboxes',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Sandbox
 * Deletes a Sandbox by name.
 */
export const deleteSandbox = <ThrowOnError extends boolean = false>(options: Options<DeleteSandboxData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSandboxResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sandboxes/{sandboxName}',
        ...options
    });
};

/**
 * Get Sandbox
 * Returns a Sandbox by name.
 */
export const getSandbox = <ThrowOnError extends boolean = false>(options: Options<GetSandboxData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSandboxResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sandboxes/{sandboxName}',
        ...options
    });
};

/**
 * Update Sandbox
 * Update a Sandbox by name.
 */
export const updateSandbox = <ThrowOnError extends boolean = false>(options: Options<UpdateSandboxData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateSandboxResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sandboxes/{sandboxName}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Sandboxes
 * Returns a list of Sandbox Previews in the workspace.
 */
export const listSandboxPreviews = <ThrowOnError extends boolean = false>(options: Options<ListSandboxPreviewsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListSandboxPreviewsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sandboxes/{sandboxName}/previews',
        ...options
    });
};

/**
 * Create Sandbox Preview
 * Create a preview
 */
export const createSandboxPreview = <ThrowOnError extends boolean = false>(options: Options<CreateSandboxPreviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSandboxPreviewResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sandboxes/{sandboxName}/previews',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Sandbox Preview
 * Deletes a Sandbox Preview by name.
 */
export const deleteSandboxPreview = <ThrowOnError extends boolean = false>(options: Options<DeleteSandboxPreviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSandboxPreviewResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sandboxes/{sandboxName}/previews/{previewName}',
        ...options
    });
};

/**
 * Get Sandbox Preview
 * Returns a Sandbox Preview by name.
 */
export const getSandboxPreview = <ThrowOnError extends boolean = false>(options: Options<GetSandboxPreviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSandboxPreviewResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sandboxes/{sandboxName}/previews/{previewName}',
        ...options
    });
};

/**
 * Update Sandbox Preview
 * Updates a Sandbox Preview by name.
 */
export const updateSandboxPreview = <ThrowOnError extends boolean = false>(options: Options<UpdateSandboxPreviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateSandboxPreviewResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sandboxes/{sandboxName}/previews/{previewName}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get tokens for Sandbox Preview
 * Gets tokens for a Sandbox Preview.
 */
export const listSandboxPreviewTokens = <ThrowOnError extends boolean = false>(options: Options<ListSandboxPreviewTokensData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListSandboxPreviewTokensResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sandboxes/{sandboxName}/previews/{previewName}/tokens',
        ...options
    });
};

/**
 * Create token for Sandbox Preview
 * Creates a token for a Sandbox Preview.
 */
export const createSandboxPreviewToken = <ThrowOnError extends boolean = false>(options: Options<CreateSandboxPreviewTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSandboxPreviewTokenResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sandboxes/{sandboxName}/previews/{previewName}/tokens',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete token for Sandbox Preview
 * Deletes a token for a Sandbox Preview by name.
 */
export const deleteSandboxPreviewToken = <ThrowOnError extends boolean = false>(options: Options<DeleteSandboxPreviewTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSandboxPreviewTokenResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sandboxes/{sandboxName}/previews/{previewName}/tokens/{tokenName}',
        ...options
    });
};

/**
 * Start Sandbox
 * Starts a Sandbox by name.
 */
export const startSandbox = <ThrowOnError extends boolean = false>(options: Options<StartSandboxData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<StartSandboxResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sandboxes/{sandboxName}/start',
        ...options
    });
};

/**
 * Stop Sandbox
 * Stops a Sandbox by name.
 */
export const stopSandbox = <ThrowOnError extends boolean = false>(options: Options<StopSandboxData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<StopSandboxResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sandboxes/{sandboxName}/stop',
        ...options
    });
};

/**
 * Get workspace service accounts
 * Returns a list of all service accounts in the workspace.
 */
export const getWorkspaceServiceAccounts = <ThrowOnError extends boolean = false>(options?: Options<GetWorkspaceServiceAccountsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetWorkspaceServiceAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/service_accounts',
        ...options
    });
};

/**
 * Create workspace service account
 * Creates a service account in the workspace.
 */
export const createWorkspaceServiceAccount = <ThrowOnError extends boolean = false>(options: Options<CreateWorkspaceServiceAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateWorkspaceServiceAccountResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/service_accounts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete workspace service account
 * Deletes a service account.
 */
export const deleteWorkspaceServiceAccount = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkspaceServiceAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteWorkspaceServiceAccountResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/service_accounts/{clientId}',
        ...options
    });
};

/**
 * Update workspace service account
 * Updates a service account.
 */
export const updateWorkspaceServiceAccount = <ThrowOnError extends boolean = false>(options: Options<UpdateWorkspaceServiceAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateWorkspaceServiceAccountResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/service_accounts/{clientId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List API keys for service account
 * Returns a list of all API keys for a service account.
 */
export const listApiKeysForServiceAccount = <ThrowOnError extends boolean = false>(options: Options<ListApiKeysForServiceAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListApiKeysForServiceAccountResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/service_accounts/{clientId}/api_keys',
        ...options
    });
};

/**
 * Create API key for service account
 * Creates an API key for a service account.
 */
export const createApiKeyForServiceAccount = <ThrowOnError extends boolean = false>(options: Options<CreateApiKeyForServiceAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateApiKeyForServiceAccountResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/service_accounts/{clientId}/api_keys',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete API key for service account
 * Deletes an API key for a service account.
 */
export const deleteApiKeyForServiceAccount = <ThrowOnError extends boolean = false>(options: Options<DeleteApiKeyForServiceAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/service_accounts/{clientId}/api_keys/{apiKeyId}',
        ...options
    });
};

/**
 * List templates
 * Returns a list of all templates.
 */
export const listTemplates = <ThrowOnError extends boolean = false>(options?: Options<ListTemplatesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTemplatesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/templates',
        ...options
    });
};

/**
 * Get template
 * Returns a template by name.
 */
export const getTemplate = <ThrowOnError extends boolean = false>(options: Options<GetTemplateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTemplateResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/templates/{templateName}',
        ...options
    });
};

export const getTemplateContents = <ThrowOnError extends boolean = false>(options: Options<GetTemplateContentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTemplateContentsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/templates/{templateName}/contents',
        ...options
    });
};

export const getTemplateFileContents = <ThrowOnError extends boolean = false>(options: Options<GetTemplateFileContentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTemplateFileContentsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/templates/{templateName}/contents/{fileName}',
        ...options
    });
};

/**
 * List users in workspace
 * Returns a list of all users in the workspace.
 */
export const listWorkspaceUsers = <ThrowOnError extends boolean = false>(options?: Options<ListWorkspaceUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListWorkspaceUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options
    });
};

/**
 * Invite user to workspace
 * Invites a user to the workspace by email.
 */
export const inviteWorkspaceUser = <ThrowOnError extends boolean = false>(options: Options<InviteWorkspaceUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<InviteWorkspaceUserResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Remove user from workspace or revoke invitation
 * Removes a user from the workspace (or revokes an invitation if the user has not accepted the invitation yet).
 */
export const removeWorkspaceUser = <ThrowOnError extends boolean = false>(options: Options<RemoveWorkspaceUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{subOrEmail}',
        ...options
    });
};

/**
 * Update user role in workspace
 * Updates the role of a user in the workspace.
 */
export const updateWorkspaceUserRole = <ThrowOnError extends boolean = false>(options: Options<UpdateWorkspaceUserRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateWorkspaceUserRoleResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/{subOrEmail}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List workspaces
 * Returns a list of all workspaces.
 */
export const listWorkspaces = <ThrowOnError extends boolean = false>(options?: Options<ListWorkspacesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListWorkspacesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/workspaces',
        ...options
    });
};

/**
 * Create worspace
 * Creates a workspace.
 */
export const createWorspace = <ThrowOnError extends boolean = false>(options: Options<CreateWorspaceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateWorspaceResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/workspaces',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete workspace
 * Deletes a workspace by name.
 */
export const deleteWorkspace = <ThrowOnError extends boolean = false>(options: Options<DeleteWorkspaceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteWorkspaceResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspaceName}',
        ...options
    });
};

/**
 * Get workspace
 * Returns a workspace by name.
 */
export const getWorkspace = <ThrowOnError extends boolean = false>(options: Options<GetWorkspaceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWorkspaceResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspaceName}',
        ...options
    });
};

/**
 * Update workspace
 * Updates a workspace by name.
 */
export const updateWorkspace = <ThrowOnError extends boolean = false>(options: Options<UpdateWorkspaceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateWorkspaceResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspaceName}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Decline invitation to workspace
 * Declines an invitation to a workspace.
 */
export const declineWorkspaceInvitation = <ThrowOnError extends boolean = false>(options: Options<DeclineWorkspaceInvitationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DeclineWorkspaceInvitationResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspaceName}/decline',
        ...options
    });
};

/**
 * Accept invitation to workspace
 * Accepts an invitation to a workspace.
 */
export const acceptWorkspaceInvitation = <ThrowOnError extends boolean = false>(options: Options<AcceptWorkspaceInvitationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AcceptWorkspaceInvitationResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspaceName}/join',
        ...options
    });
};

/**
 * Leave workspace
 * Leaves a workspace.
 */
export const leaveWorkspace = <ThrowOnError extends boolean = false>(options: Options<LeaveWorkspaceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<LeaveWorkspaceResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/workspaces/{workspaceName}/leave',
        ...options
    });
};

/**
 * Check workspace availability
 * Check if a workspace is available.
 */
export const checkWorkspaceAvailability = <ThrowOnError extends boolean = false>(options: Options<CheckWorkspaceAvailabilityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CheckWorkspaceAvailabilityResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/workspaces/availability',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};