// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { DeleteFilesystemByPathData, DeleteFilesystemByPathResponse, DeleteFilesystemByPathError, GetFilesystemByPathData, GetFilesystemByPathResponse, GetFilesystemByPathError, PutFilesystemByPathData, PutFilesystemByPathResponse, PutFilesystemByPathError, DeleteNetworkProcessByPidMonitorData, DeleteNetworkProcessByPidMonitorResponse, DeleteNetworkProcessByPidMonitorError, PostNetworkProcessByPidMonitorData, PostNetworkProcessByPidMonitorResponse, PostNetworkProcessByPidMonitorError, GetNetworkProcessByPidPortsData, GetNetworkProcessByPidPortsResponse, GetNetworkProcessByPidPortsError, GetProcessData, GetProcessResponse, PostProcessData, PostProcessResponse, PostProcessError, DeleteProcessByIdentifierData, DeleteProcessByIdentifierResponse, DeleteProcessByIdentifierError, GetProcessByIdentifierData, GetProcessByIdentifierResponse, GetProcessByIdentifierError, DeleteProcessByIdentifierKillData, DeleteProcessByIdentifierKillResponse, DeleteProcessByIdentifierKillError, GetProcessByIdentifierLogsData, GetProcessByIdentifierLogsResponse, GetProcessByIdentifierLogsError, GetProcessByIdentifierLogsStreamData, GetProcessByIdentifierLogsStreamResponse, GetProcessByIdentifierLogsStreamError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Delete file or directory
 * Delete a file or directory
 */
export const deleteFilesystemByPath = <ThrowOnError extends boolean = false>(options: Options<DeleteFilesystemByPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteFilesystemByPathResponse, DeleteFilesystemByPathError, ThrowOnError>({
        url: '/filesystem/{path}',
        ...options
    });
};

/**
 * Get file or directory information
 * Get content of a file or listing of a directory
 */
export const getFilesystemByPath = <ThrowOnError extends boolean = false>(options: Options<GetFilesystemByPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFilesystemByPathResponse, GetFilesystemByPathError, ThrowOnError>({
        url: '/filesystem/{path}',
        ...options
    });
};

/**
 * Create or update file or directory
 * Create or update a file or directory
 */
export const putFilesystemByPath = <ThrowOnError extends boolean = false>(options: Options<PutFilesystemByPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutFilesystemByPathResponse, PutFilesystemByPathError, ThrowOnError>({
        url: '/filesystem/{path}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Stop monitoring ports for a process
 * Stop monitoring for new ports opened by a process
 */
export const deleteNetworkProcessByPidMonitor = <ThrowOnError extends boolean = false>(options: Options<DeleteNetworkProcessByPidMonitorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteNetworkProcessByPidMonitorResponse, DeleteNetworkProcessByPidMonitorError, ThrowOnError>({
        url: '/network/process/{pid}/monitor',
        ...options
    });
};

/**
 * Start monitoring ports for a process
 * Start monitoring for new ports opened by a process
 */
export const postNetworkProcessByPidMonitor = <ThrowOnError extends boolean = false>(options: Options<PostNetworkProcessByPidMonitorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostNetworkProcessByPidMonitorResponse, PostNetworkProcessByPidMonitorError, ThrowOnError>({
        url: '/network/process/{pid}/monitor',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get open ports for a process
 * Get a list of all open ports for a process
 */
export const getNetworkProcessByPidPorts = <ThrowOnError extends boolean = false>(options: Options<GetNetworkProcessByPidPortsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetNetworkProcessByPidPortsResponse, GetNetworkProcessByPidPortsError, ThrowOnError>({
        url: '/network/process/{pid}/ports',
        ...options
    });
};

/**
 * List all processes
 * Get a list of all running and completed processes
 */
export const getProcess = <ThrowOnError extends boolean = false>(options?: Options<GetProcessData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetProcessResponse, unknown, ThrowOnError>({
        url: '/process',
        ...options
    });
};

/**
 * Execute a command
 * Execute a command and return process information
 */
export const postProcess = <ThrowOnError extends boolean = false>(options: Options<PostProcessData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostProcessResponse, PostProcessError, ThrowOnError>({
        url: '/process',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Stop a process
 * Gracefully stop a running process
 */
export const deleteProcessByIdentifier = <ThrowOnError extends boolean = false>(options: Options<DeleteProcessByIdentifierData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProcessByIdentifierResponse, DeleteProcessByIdentifierError, ThrowOnError>({
        url: '/process/{identifier}',
        ...options
    });
};

/**
 * Get process by identifier
 * Get information about a process by its PID or name
 */
export const getProcessByIdentifier = <ThrowOnError extends boolean = false>(options: Options<GetProcessByIdentifierData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProcessByIdentifierResponse, GetProcessByIdentifierError, ThrowOnError>({
        url: '/process/{identifier}',
        ...options
    });
};

/**
 * Kill a process
 * Forcefully kill a running process
 */
export const deleteProcessByIdentifierKill = <ThrowOnError extends boolean = false>(options: Options<DeleteProcessByIdentifierKillData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProcessByIdentifierKillResponse, DeleteProcessByIdentifierKillError, ThrowOnError>({
        url: '/process/{identifier}/kill',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get process logs
 * Get the stdout and stderr output of a process
 */
export const getProcessByIdentifierLogs = <ThrowOnError extends boolean = false>(options: Options<GetProcessByIdentifierLogsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProcessByIdentifierLogsResponse, GetProcessByIdentifierLogsError, ThrowOnError>({
        url: '/process/{identifier}/logs',
        ...options
    });
};

/**
 * Get process logs in realtime
 * Get the stdout and stderr output of a process in realtime
 */
export const getProcessByIdentifierLogsStream = <ThrowOnError extends boolean = false>(options: Options<GetProcessByIdentifierLogsStreamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProcessByIdentifierLogsStreamResponse, GetProcessByIdentifierLogsStreamError, ThrowOnError>({
        url: '/process/{identifier}/logs/stream',
        ...options
    });
};