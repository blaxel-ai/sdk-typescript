// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-fetch';
import type { DeleteFilesystemByPathData, DeleteFilesystemByPathError, DeleteFilesystemByPathResponse, GetFilesystemByPathData, GetFilesystemByPathError, GetFilesystemByPathResponse, PutFilesystemByPathData, PutFilesystemByPathError, PutFilesystemByPathResponse, DeleteNetworkProcessByPidMonitorData, DeleteNetworkProcessByPidMonitorError, DeleteNetworkProcessByPidMonitorResponse, PostNetworkProcessByPidMonitorData, PostNetworkProcessByPidMonitorError, PostNetworkProcessByPidMonitorResponse, GetNetworkProcessByPidPortsData, GetNetworkProcessByPidPortsError, GetNetworkProcessByPidPortsResponse, GetProcessError, GetProcessResponse, PostProcessData, PostProcessError, PostProcessResponse, DeleteProcessByIdentifierData, DeleteProcessByIdentifierError, DeleteProcessByIdentifierResponse, GetProcessByIdentifierData, GetProcessByIdentifierError, GetProcessByIdentifierResponse, DeleteProcessByIdentifierKillData, DeleteProcessByIdentifierKillError, DeleteProcessByIdentifierKillResponse, GetProcessByIdentifierLogsData, GetProcessByIdentifierLogsError, GetProcessByIdentifierLogsResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Delete file or directory
 * Delete a file or directory
 */
export const deleteFilesystemByPath = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteFilesystemByPathData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteFilesystemByPathResponse, DeleteFilesystemByPathError, ThrowOnError>({
        ...options,
        url: '/filesystem/{path}'
    });
};

/**
 * Get file or directory information
 * Get content of a file or listing of a directory
 */
export const getFilesystemByPath = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetFilesystemByPathData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetFilesystemByPathResponse, GetFilesystemByPathError, ThrowOnError>({
        ...options,
        url: '/filesystem/{path}'
    });
};

/**
 * Create or update file or directory
 * Create or update a file or directory
 */
export const putFilesystemByPath = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PutFilesystemByPathData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutFilesystemByPathResponse, PutFilesystemByPathError, ThrowOnError>({
        ...options,
        url: '/filesystem/{path}'
    });
};

/**
 * Stop monitoring ports for a process
 * Stop monitoring for new ports opened by a process
 */
export const deleteNetworkProcessByPidMonitor = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteNetworkProcessByPidMonitorData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteNetworkProcessByPidMonitorResponse, DeleteNetworkProcessByPidMonitorError, ThrowOnError>({
        ...options,
        url: '/network/process/{pid}/monitor'
    });
};

/**
 * Start monitoring ports for a process
 * Start monitoring for new ports opened by a process
 */
export const postNetworkProcessByPidMonitor = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostNetworkProcessByPidMonitorData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostNetworkProcessByPidMonitorResponse, PostNetworkProcessByPidMonitorError, ThrowOnError>({
        ...options,
        url: '/network/process/{pid}/monitor'
    });
};

/**
 * Get open ports for a process
 * Get a list of all open ports for a process
 */
export const getNetworkProcessByPidPorts = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetNetworkProcessByPidPortsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetNetworkProcessByPidPortsResponse, GetNetworkProcessByPidPortsError, ThrowOnError>({
        ...options,
        url: '/network/process/{pid}/ports'
    });
};

/**
 * List all processes
 * Get a list of all running and completed processes
 */
export const getProcess = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProcessResponse, GetProcessError, ThrowOnError>({
        ...options,
        url: '/process'
    });
};

/**
 * Execute a command
 * Execute a command and return process information
 */
export const postProcess = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<PostProcessData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostProcessResponse, PostProcessError, ThrowOnError>({
        ...options,
        url: '/process'
    });
};

/**
 * Stop a process
 * Gracefully stop a running process
 */
export const deleteProcessByIdentifier = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteProcessByIdentifierData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteProcessByIdentifierResponse, DeleteProcessByIdentifierError, ThrowOnError>({
        ...options,
        url: '/process/{identifier}'
    });
};

/**
 * Get process by identifier
 * Get information about a process by its PID or name
 */
export const getProcessByIdentifier = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetProcessByIdentifierData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProcessByIdentifierResponse, GetProcessByIdentifierError, ThrowOnError>({
        ...options,
        url: '/process/{identifier}'
    });
};

/**
 * Kill a process
 * Forcefully kill a running process
 */
export const deleteProcessByIdentifierKill = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<DeleteProcessByIdentifierKillData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteProcessByIdentifierKillResponse, DeleteProcessByIdentifierKillError, ThrowOnError>({
        ...options,
        url: '/process/{identifier}/kill'
    });
};

/**
 * Get process logs
 * Get the stdout and stderr output of a process
 */
export const getProcessByIdentifierLogs = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetProcessByIdentifierLogsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProcessByIdentifierLogsResponse, GetProcessByIdentifierLogsError, ThrowOnError>({
        ...options,
        url: '/process/{identifier}/logs'
    });
};